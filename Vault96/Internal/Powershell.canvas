{
	"nodes":[
		{"id":"98687320a318e429","type":"text","text":"```ps1\nparam(\n    [Parameter(Mandatory)]\n    [string]$ComputerName\n)\n\n# Office registry versions to check\n$officeVersions = @(\"15.0\", \"16.0\")\n\n# This script block runs on the remote computer\n$scriptBlock = {\n    param($officeVersions)\n\n    # Get all user profiles that are currently loaded (i.e., logged in)\n    $loadedProfiles = Get-WmiObject Win32_UserProfile | Where-Object { $_.Loaded -eq $true -and $_.Special -eq $false }\n\n    foreach ($profile in $loadedProfiles) {\n        $sid = $profile.SID\n        $userHive = \"HKU:\\$sid\"\n\n        foreach ($ver in $officeVersions) {\n            $regPath = \"$userHive\\Software\\Microsoft\\Office\\$ver\\Outlook\\Cached Mode\"\n            if (!(Test-Path $regPath)) {\n                # Create the key if it doesn't exist\n                New-Item -Path $regPath -Force | Out-Null\n            }\n            # Set DownloadSharedFolders to 0 (unchecked)\n            Set-ItemProperty -Path $regPath -Name \"DownloadSharedFolders\" -Type DWord -Value 0\n        }\n    }\n    Write-Output \"DownloadSharedFolders set to 0 for all logged-in users for Office versions: $($officeVersions -join ', ')\"\n}\n\nInvoke-Command -ComputerName $ComputerName -ScriptBlock $scriptBlock -ArgumentList $officeVersions\n```","x":-400,"y":-220,"width":1160,"height":940},
		{"id":"5b197aeb7d3741ee","type":"text","text":"# Uncheck \"Download shared folders\" in Outlook","x":-220,"y":-306,"width":693,"height":86},
		{"id":"08a5989642abe85c","type":"text","text":"Absolutely, this is possible! Here’s a breakdown of how the script can work, step by step:\n\n**Workflow:**\n1. Enumerate all currently logged-in user profiles on the remote PC.\n2. For each logged-in user:\n   - For each relevant Office version, check if the registry value DownloadSharedFolders exists and if it is enabled (set to 1).\n   - Collect users where the option is already disabled (set to 0 or missing).\n   - Collect users where the option is enabled (set to 1).\n3. Present you with a summary:\n   - List of users where the option is already disabled.\n   - For each user where the option is enabled, prompt you to confirm if you want to change it for that user.\n4. Only after your confirmation does the script make the changes.\n\n---\n\n## Implementation Plan\n\n- Since PowerShell scripts can't interactively prompt for input during a remote Invoke-Command session, the logic must happen locally:\n  - The script queries the registry for all users, gathers results, and returns them to your PowerShell session.\n  - The script then interactively asks for your decision for each user that has the option enabled.\n  - If you approve, it sends a second remote command to update the appropriate registry key for those users.\n\n---\n\n## Example Script\n\n```powershell name=Outlook-DownloadSharedFolders-Interactive.ps1\nparam(\n    [Parameter(Mandatory)]\n    [string]$ComputerName\n)\n\n$officeVersions = @(\"15.0\", \"16.0\")\n\n# Step 1: Gather registry values for all logged-in users\n$scriptBlock = {\n    param($officeVersions)\n    $results = @()\n    $loadedProfiles = Get-WmiObject Win32_UserProfile | Where-Object { $_.Loaded -eq $true -and $_.Special -eq $false }\n\n    foreach ($profile in $loadedProfiles) {\n        $sid = $profile.SID\n        $username = $profile.LocalPath.Split('\\')[-1]\n        foreach ($ver in $officeVersions) {\n            $regPath = \"HKU:\\$sid\\Software\\Microsoft\\Office\\$ver\\Outlook\\Cached Mode\"\n            $value = $null\n            if (Test-Path $regPath) {\n                $value = (Get-ItemProperty -Path $regPath -Name \"DownloadSharedFolders\" -ErrorAction SilentlyContinue).DownloadSharedFolders\n            }\n            $state = if ($null -eq $value -or $value -eq 0) { \"Disabled\" } elseif ($value -eq 1) { \"Enabled\" } else { \"Unknown\" }\n            $results += [PSCustomObject]@{\n                SID = $sid\n                Username = $username\n                OfficeVersion = $ver\n                State = $state\n                RegPath = $regPath\n            }\n        }\n    }\n    return $results\n}\n\n$results = Invoke-Command -ComputerName $ComputerName -ScriptBlock $scriptBlock -ArgumentList ($officeVersions)\n\n# Step 2: Locally analyze results, display summary, and prompt for action\n$alreadyDisabled = $results | Where-Object { $_.State -eq \"Disabled\" }\n$toAsk = $results | Where-Object { $_.State -eq \"Enabled\" }\n\nWrite-Host \"Users with 'Download shared folders' already disabled:\"\n$alreadyDisabled | ForEach-Object {\n    Write-Host \" - $($_.Username) [Office $($_.OfficeVersion)]\"\n}\nWrite-Host \"\"\n\n$usersToModify = @()\nforeach ($item in $toAsk) {\n    $question = \"User '$($item.Username)' [Office $($item.OfficeVersion)] has 'Download shared folders' ENABLED. Change to DISABLED? (y/n): \"\n    $response = Read-Host $question\n    if ($response -eq 'y') {\n        $usersToModify += $item\n    }\n}\n\nif ($usersToModify.Count -eq 0) {\n    Write-Host \"No changes to make.\"\n    return\n}\n\n# Step 3: Remotely modify registry for selected users\n$changeBlock = {\n    param($items)\n    foreach ($item in $items) {\n        $regPath = $item.RegPath\n        if (!(Test-Path $regPath)) {\n            New-Item -Path $regPath -Force | Out-Null\n        }\n        Set-ItemProperty -Path $regPath -Name \"DownloadSharedFolders\" -Type DWord -Value 0\n    }\n    \"Changed DownloadSharedFolders to 0 for $($items.Count) items.\"\n}\n\n# Send only needed info (avoid serialization issues)\n$toSend = $usersToModify | Select-Object SID, Username, OfficeVersion, RegPath\n\nInvoke-Command -ComputerName $ComputerName -ScriptBlock $changeBlock -ArgumentList ,$toSend\n\nWrite-Host \"All requested changes completed.\"\n```\n\n---\n\n## **How to Use**\n```powershell\n.\\Outlook-DownloadSharedFolders-Interactive.ps1 -ComputerName \"TargetPC\"\n```\n- The script will first list users where the setting is already disabled.\n- For each user/Outlook version where it’s enabled, you’ll be prompted (y/n) to change it.\n- Then it will remotely change only the selected users.\n\n---\n\n**If you want this for all profiles (not just logged-in) or need further customization, just ask!**","x":786,"y":-440,"width":1294,"height":1500},
		{"id":"d13a5fe78bb55552","x":-318,"y":1267,"width":498,"height":93,"type":"text","text":"# Duo setup script for new hires"}
	],
	"edges":[]
}
{
	"nodes":[
		{"id":"76473e46cd100f26","type":"text","text":"Absolutely, here’s a full sysadmin script workflow—using PowerShell, with PSExec to run as the user, and with all your requested logic. I’ll explain each step and then provide a script you can adapt.\n\n---\n\n## 1. PS Remoting: Checking & Enabling\n\n- You need PowerShell Remoting enabled on the target PC.  \n- To enable:  \n  ```powershell\n  Enable-PSRemoting -Force\n  ```\n  You can run this as an admin on each workstation, or use Group Policy:  \n  - Computer Configuration > Policies > Administrative Templates > Windows Components > Windows Remote Management (WinRM) > WinRM Service > Allow remote server management through WinRM.\n\n## 2. Discovering Where the User is Logged In\n\nYou can use `quser` or query the DC logs, but for most environments, a sweep with `quser` is practical.\n\n## 3. Detecting Outlook Version (on remote PC, as the user)\n\n- The registry key:\n  ```\n  HKCU:\\Software\\Microsoft\\Office\\\n  ```\n  The subkeys (`16.0`, `15.0`, etc.) indicate the Outlook version.\n\n## 4. Killing Outlook Process\n\n- Check for `OUTLOOK.EXE`. Warn and then kill if found.\n\n## 5. Registry Changes: Download Shared Folders & Cache Mode\n\n- Set the appropriate registry keys based on detected version.\n\n## 6. Running as the User\n\n- Use [Sysinternals PSExec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec) with `-i` and `-u` to launch a PowerShell session as the user.\n\n---\n\n# Script: What This Does\n\n- Finds the computer where a user is logged in\n- Remotely checks for Outlook version in HKCU\n- Kills Outlook if running (with warning)\n- Modifies the needed registry settings\n- All actions performed in the user context (using PSExec)\n\n---\n\n```powershell name=OutlookCacheModeScript.ps1\nparam(\n    [string]$SamAccountName,\n    [string]$PSExecPath = \"C:\\Sysinternals\\PsExec.exe\"\n)\n\nfunction Find-UserPC {\n    $computers = Get-ADComputer -Filter * | Select-Object -ExpandProperty Name\n    foreach ($computer in $computers) {\n        try {\n            $sessions = quser /server:$computer 2>$null\n            if ($sessions -match $SamAccountName) {\n                return $computer\n            }\n        } catch {}\n    }\n    return $null\n}\n\nfunction Get-OutlookVersion {\n    param ($RemoteSession)\n    $officeKey = \"HKCU:\\Software\\Microsoft\\Office\\\"\n    $versions = @(\"16.0\",\"15.0\",\"14.0\",\"12.0\")\n    foreach ($ver in $versions) {\n        $key = \"${officeKey}${ver}\\Outlook\"\n        if (Test-Path $key) { return $ver }\n    }\n    return $null\n}\n\nfunction Set-OutlookCacheSettings {\n    param (\n        [string]$Version\n    )\n    $regPath = \"HKCU:\\Software\\Microsoft\\Office\\$Version\\Outlook\\Cached Mode\"\n    # Uncheck Download Shared Folders\n    Set-ItemProperty -Path $regPath -Name \"DownloadSharedFolders\" -Value 0 -Type DWord -ErrorAction SilentlyContinue\n    # Enable Cached Exchange Mode\n    Set-ItemProperty -Path $regPath -Name \"Enable\" -Value 1 -Type DWord -ErrorAction SilentlyContinue\n    # Set cache duration to 3 months\n    Set-ItemProperty -Path $regPath -Name \"SyncWindowSetting\" -Value 3 -Type DWord -ErrorAction SilentlyContinue\n}\n\n# MAIN\nImport-Module ActiveDirectory\n\n$TargetPC = Find-UserPC\nif (-not $TargetPC) {\n    Write-Host \"User $SamAccountName not found logged in anywhere.\"\n    exit 1\n}\nWrite-Host \"User $SamAccountName is logged into $TargetPC\"\n\n# Get logged-on user session ID\n$sessions = quser /server:$TargetPC\n$sessionLine = $sessions | Where-Object {$_ -match $SamAccountName}\nif (-not $sessionLine) { Write-Host \"Session not found\"; exit 1 }\n$sessionId = ($sessionLine -split '\\s+')[-5] # usually 3rd to last column\n\n# Build script block to run as user\n$remoteScript = @'\n# Warn user and close Outlook if running\n$olProc = Get-Process OUTLOOK -ErrorAction SilentlyContinue\nif ($olProc) {\n    $wshell = New-Object -ComObject WScript.Shell\n    $wshell.Popup(\"IT is about to close Outlook to update settings. Please save your work. Click OK to continue.\", 10, \"Outlook Update\", 0x40)\n    Stop-Process -Name OUTLOOK -Force\n}\n# Detect Outlook version\n$officeKey = \"HKCU:\\Software\\Microsoft\\Office\\\"\n$versions = @(\"16.0\",\"15.0\",\"14.0\",\"12.0\")\n$found = $false\nforeach ($ver in $versions) {\n    $key = \"${officeKey}${ver}\\Outlook\"\n    if (Test-Path $key) {\n        $found = $true\n        $regPath = \"HKCU:\\Software\\Microsoft\\Office\\$ver\\Outlook\\Cached Mode\"\n        # Uncheck Download Shared Folders\n        Set-ItemProperty -Path $regPath -Name \"DownloadSharedFolders\" -Value 0 -Type DWord -ErrorAction SilentlyContinue\n        # Enable Cached Exchange Mode\n        Set-ItemProperty -Path $regPath -Name \"Enable\" -Value 1 -Type DWord -ErrorAction SilentlyContinue\n        # Set cache duration to 3 months\n        Set-ItemProperty -Path $regPath -Name \"SyncWindowSetting\" -Value 3 -Type DWord -ErrorAction SilentlyContinue\n        Write-Host \"Updated settings for Outlook version $ver\"\n        break\n    }\n}\nif (-not $found) { Write-Host \"Outlook version not detected in registry.\" }\n'@\n\n# Save remote script to temp file\n$tempScript = [System.IO.Path]::GetTempFileName() + \".ps1\"\nSet-Content -Path $tempScript -Value $remoteScript\n\n# Use PSExec to run as session user\n# -i for interactive, -s for system, but we want the user's context & session, so use -i $sessionId\n$cmd = \"$PSExecPath -accepteula -i $sessionId \\\\$TargetPC powershell -ExecutionPolicy Bypass -File `\"$tempScript`\"\"\nWrite-Host \"Executing: $cmd\"\nInvoke-Expression $cmd\n\n# Cleanup\nRemove-Item $tempScript\n```\n\n---\n\n## Usage\n\n- Run as a domain admin from your admin workstation.\n- Requires:  \n  - PowerShell  \n  - PSExec (`C:\\Sysinternals\\PsExec.exe`)  \n  - ActiveDirectory module (`Import-Module ActiveDirectory`)\n\n```powershell\n.\\OutlookCacheModeScript.ps1 -SamAccountName \"username\"\n```\n\n---\n\n## Notes\n\n- This script finds the PC, detects session, and runs the registry fix as the user.\n- Warns the user and closes Outlook if running.\n- Handles Outlook versions 2007–365.\n- Shows you the exact command it is running for transparency.\n- PSRemoting: If you want to enable it on all computers, use GPO or wrap `Enable-PSRemoting -Force` in a remote command run as admin.\n\n---\n\nLet me know if you need a version that will check for and enable PSRemoting, or help with a GPO setup!","x":-1200,"y":-115,"width":1438,"height":2195},
		{"id":"d86460e52a535531","type":"text","text":"```ps1\nparam(\n    [string]$SamAccountName,\n    [string]$PSExecPath = \"C:\\Sysinternals\\PsExec.exe\"\n)\n\nfunction Find-UserPC {\n    $computers = Get-ADComputer -Filter * | Select-Object -ExpandProperty Name\n    foreach ($computer in $computers) {\n        try {\n            $sessions = quser /server:$computer 2>$null\n            if ($sessions -match $SamAccountName) {\n                return $computer\n            }\n        } catch {}\n    }\n    return $null\n}\n\nfunction Get-OutlookVersion {\n    param ($RemoteSession)\n    $officeKey = \"HKCU:\\Software\\Microsoft\\Office\\\"\n    $versions = @(\"16.0\",\"15.0\",\"14.0\",\"12.0\")\n    foreach ($ver in $versions) {\n        $key = \"${officeKey}${ver}\\Outlook\"\n        if (Test-Path $key) { return $ver }\n    }\n    return $null\n}\n\nfunction Set-OutlookCacheSettings {\n    param (\n        [string]$Version\n    )\n    $regPath = \"HKCU:\\Software\\Microsoft\\Office\\$Version\\Outlook\\Cached Mode\"\n    # Uncheck Download Shared Folders\n    Set-ItemProperty -Path $regPath -Name \"DownloadSharedFolders\" -Value 0 -Type DWord -ErrorAction SilentlyContinue\n    # Enable Cached Exchange Mode\n    Set-ItemProperty -Path $regPath -Name \"Enable\" -Value 1 -Type DWord -ErrorAction SilentlyContinue\n    # Set cache duration to 3 months\n    Set-ItemProperty -Path $regPath -Name \"SyncWindowSetting\" -Value 3 -Type DWord -ErrorAction SilentlyContinue\n}\n\n# MAIN\nImport-Module ActiveDirectory\n\n$TargetPC = Find-UserPC\nif (-not $TargetPC) {\n    Write-Host \"User $SamAccountName not found logged in anywhere.\"\n    exit 1\n}\nWrite-Host \"User $SamAccountName is logged into $TargetPC\"\n\n# Get logged-on user session ID\n$sessions = quser /server:$TargetPC\n$sessionLine = $sessions | Where-Object {$_ -match $SamAccountName}\nif (-not $sessionLine) { Write-Host \"Session not found\"; exit 1 }\n$sessionId = ($sessionLine -split '\\s+')[-5] # usually 3rd to last column\n\n# Build script block to run as user\n$remoteScript = @'\n# Warn user and close Outlook if running\n$olProc = Get-Process OUTLOOK -ErrorAction SilentlyContinue\nif ($olProc) {\n    $wshell = New-Object -ComObject WScript.Shell\n    $wshell.Popup(\"IT is about to close Outlook to update settings. Please save your work. Click OK to continue.\", 10, \"Outlook Update\", 0x40)\n    Stop-Process -Name OUTLOOK -Force\n}\n# Detect Outlook version\n$officeKey = \"HKCU:\\Software\\Microsoft\\Office\\\"\n$versions = @(\"16.0\",\"15.0\",\"14.0\",\"12.0\")\n$found = $false\nforeach ($ver in $versions) {\n    $key = \"${officeKey}${ver}\\Outlook\"\n    if (Test-Path $key) {\n        $found = $true\n        $regPath = \"HKCU:\\Software\\Microsoft\\Office\\$ver\\Outlook\\Cached Mode\"\n        # Uncheck Download Shared Folders\n        Set-ItemProperty -Path $regPath -Name \"DownloadSharedFolders\" -Value 0 -Type DWord -ErrorAction SilentlyContinue\n        # Enable Cached Exchange Mode\n        Set-ItemProperty -Path $regPath -Name \"Enable\" -Value 1 -Type DWord -ErrorAction SilentlyContinue\n        # Set cache duration to 3 months\n        Set-ItemProperty -Path $regPath -Name \"SyncWindowSetting\" -Value 3 -Type DWord -ErrorAction SilentlyContinue\n        Write-Host \"Updated settings for Outlook version $ver\"\n        break\n    }\n}\nif (-not $found) { Write-Host \"Outlook version not detected in registry.\" }\n'@\n\n# Save remote script to temp file\n$tempScript = [System.IO.Path]::GetTempFileName() + \".ps1\"\nSet-Content -Path $tempScript -Value $remoteScript\n\n# Use PSExec to run as session user\n# -i for interactive, -s for system, but we want the user's context & session, so use -i $sessionId\n$cmd = \"$PSExecPath -accepteula -i $sessionId \\\\$TargetPC powershell -ExecutionPolicy Bypass -File `\"$tempScript`\"\"\nWrite-Host \"Executing: $cmd\"\nInvoke-Expression $cmd\n\n# Cleanup\nRemove-Item $tempScript\n```\n```","x":480,"y":200,"width":1540,"height":1700}
	],
	"edges":[
		{"id":"1661b2db2d1627ef","fromNode":"76473e46cd100f26","fromSide":"right","toNode":"d86460e52a535531","toSide":"left"}
	]
}